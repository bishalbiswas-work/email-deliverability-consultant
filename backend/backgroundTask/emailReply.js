const Imap = require("imap");
const simpleParser = require("mailparser").simpleParser;
const nodemailer = require("nodemailer");
const fs = require("fs");
const path = require("path");
const mixpanel = require("../trackers/mixpanel");

const emailAccounts = JSON.parse(
  fs.readFileSync(
    path.join(__dirname, "emailAccounts", "emailAccounts.json"),
    "utf8"
  )
);

let processing = false; // State to track if processing is currently underway

async function processAccounts() {
  if (processing) {
    console.log("Process is currently running. Please wait...");
    return;
  }
  processing = true; // Set processing to true to indicate processing has started

  for (let account of emailAccounts) {
    // console.log("Account: ", account.email);
    const imapConfig = {
      user: account.email,
      password: account.appPassword,
      host: "mail.privateemail.com",
      port: 993,
      tls: true,
    };

    const imap = new Imap(imapConfig);

    imap.once("ready", async () => {
      await processEmails(imap, imapConfig); // Pass imapConfig here
      imap.end();
    });

    imap.once("error", (err) => {
      console.error("Connection error:", err);
    });

    imap.once("end", () => {
      //   console.log("Connection ended");
    });

    imap.connect();
  }
  processing = false; // Reset processing to false when all accounts have been processed
}

async function processEmails(imap, imapConfig) {
  return new Promise((resolve, reject) => {
    function openInbox(cb) {
      imap.openBox("INBOX", false, cb);
    }

    openInbox(async (err, box) => {
      if (err) {
        console.error("Error opening inbox:", err);
        reject(err);
        return;
      }

      imap.search(["UNSEEN"], (err, results) => {
        if (err) {
          console.error("Search error:", err);
          reject(err);
          return;
        }

        if (!results || results.length === 0) {
          console.log("No emails to process");
          resolve();
          return;
        }

        const f = imap.fetch(results, {
          bodies:
            "HEADER.FIELDS (FROM TO SUBJECT MESSAGE-ID REFERENCES IN-REPLY-TO)",
          markSeen: true,
        });

        f.on("message", (msg) => {
          msg.on("body", (stream) => {
            simpleParser(stream, async (err, mail) => {
              if (err) {
                console.error("Error parsing email:", err);
                return;
              }
              if (
                mail.subject.includes("undelivered") ||
                mail.subject.includes("undelivered:") ||
                mail.subject.includes("undeliverable") ||
                mail.subject.includes("undeliverable")
              ) {
                console.log("Logging undeliverable email:", mail.subject);
                // Log the undeliverable email here, possibly storing to a database or a file
              } else {
                //   console.log("Normal email processing:", mailObject.subject);
                // Handle other emails, possibly replying or further processing
                if (
                  mail &&
                  mail.from &&
                  mail.from.value &&
                  mail.from.value[0] &&
                  mail.from.value[0].address
                ) {
                  console.log(
                    "Unread Email Received From:",
                    mail.from.value[0].address
                  );
                  // Example reply if message ID and subject are available

                  if (mail.messageId && mail.subject) {
                    console.log(
                      "Recived data: ",
                      mail.from.value[0].address,
                      mail.subject,
                      mail.messageId
                    );
                    if (mail.subject.includes("of-Emailwarmup")) {
                      sendEmail(
                        mail.from.value[0].address,
                        imapConfig,
                        mail.from.value[0].address,
                        mail.subject,
                        mail.messageId,
                        mail.messageId
                      );
                    } else {
                      console.log(
                        `Received email does not generated by us, should not be replied. Email : ${mail.from.value[0].address}   MessageId: ${mail.messageId}`
                      );
                    }
                  } else {
                    console.log("Missing required headers to send a reply.");
                  }
                } else {
                  console.log(
                    "Email format is unexpected or missing crucial headers."
                  );
                }
              }

              //   await sendEmail(
              //     imapConfig,
              //     mail.from.value[0].address,
              //     mail.subject
              //   );
            });
          });
        });

        f.once("error", (err) => {
          console.error("Fetch error:", err);
          reject(err);
        });

        f.once("end", () => {
          console.log("Done fetching all messages!");
          resolve();
        });
      });
    });
  });
}

async function sendEmail(clientEmail, imapConfig, to, subject, inReplyTo, references) {
  const emailServerSettings = {
    host: "mail.privateemail.com",

    port: 587,
    secure: false, // Note: secure is set to false as port is 587
    auth: {
      user: imapConfig.user,
      pass: imapConfig.password,
    },
  };

  const emailClient =
    require("nodemailer").createTransport(emailServerSettings);

  const replyRes = `
    <div>
      <div>
          <p>Dear,</p>
          <p>Thank you for your email. We appreciate you reaching out to us.</p>
          <p>We will look into this and get back to you as soon as possible.</p>
          <br>
          <p>Best regards</p>
      </div>
    </div>
  `;
  const repyTxt = `
      Dear,
      Thank you for your email. We appreciate you reaching out to us.
      We will look into this and get back to you as soon as possible.
      Best regards
  `;
  let emailSpecifications = {
    from: `"${imapConfig.user}" <${imapConfig.user}>`,
    to: to,
    subject: `Re: ${subject} of-Emailwarmup`,
    // subject: `Re: ${subject}`,
    text: replyRes,
    html: repyTxt,
    inReplyTo: inReplyTo,
    references: references,
  };

  const sendProcess = async (client, mailDetails) => {
    try {
      let transmissionOutcome = await client.sendMail(mailDetails);
      //   console.log(
      //     `Message sent from ${imapConfig.user}: %s`,
      //     transmissionOutcome.messageId
      //   );
      console.log(
        `Message sent to email & ID: ${to}  ${inReplyTo} from: ${imapConfig.user} Transmission Message Id : ${transmissionOutcome.messageId}`
      );
      mixpanel.track("Email Received", {
        distinct_id: inReplyTo, // Use email as the unique identifier
        email: clientEmail,
        // cardType: eligiblePaymentMethod.funding,
      });
      mixpanel.track("Email Replied", {
        distinct_id: inReplyTo, // Use email as the unique identifier
        email: clientEmail,
        // cardType: eligiblePaymentMethod.funding,
      });
    } catch (error) {
      console.error(`Error occurred in ${imapConfig.user}:`, error);
    }
  };

  await sendProcess(emailClient, emailSpecifications);
}
// Example usage
// setInterval(async () => {
//   await processAccounts();
// }, 5000); // Loop through accounts every 5 seconds

module.exports = {
  processAccounts,
};
